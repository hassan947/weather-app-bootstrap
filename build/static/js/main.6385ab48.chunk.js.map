{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","weather","setweather","cityName","useRef","location","setLocation","submit","setSubmit","useEffect","name","current","value","latitude","longitude","console","log","axios","get","then","res","newWeather","data","navigator","geolocation","getCurrentPosition","position","coords","error","Container","Card","className","Header","Body","Title","Text","ref","Button","variant","onClick","Footer","main","temp","description","wind","speed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAmJeA,MA3If,WAAgB,IAAD,EACb,EAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAGMC,EAAWC,iBAAO,MAExB,EAAgCJ,mBAAS,MAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEA,EAA4BN,oBAAS,GAArC,mBAAOO,EAAP,KAAeC,EAAf,KA2DA,OAzDAC,qBAAU,WAER,IAAIC,EAAO,GAEPP,EAASQ,QAAQC,MACnBF,EAAI,YAAQP,EAASQ,QAAQC,OACpBP,GAEJA,IAEmB,SAAbA,EACTK,EAAO,aACEL,GAAYA,EAASQ,WAC9BH,EAAI,cAAUL,EAASQ,SAAnB,gBAAmCR,EAASS,aAIpDC,QAAQC,IAAI,SAAUN,GAClBA,GACFO,IAAMC,IAAN,0DAA6DR,EAA7D,yDACGS,MAAK,SAAAC,GACJ,IAAMC,EAAaD,EAAIE,KAGvBpB,EAAWmB,QAIhB,CAACd,EAAQF,IAGZI,qBAAU,WAGFc,UAAUC,YACZD,UAAUC,YAAYC,oBAAmB,SAACC,GACxCX,QAAQC,IAAI,iBAAkBU,EAASC,OAAOd,UAE9CP,EAAY,CACVO,SAAUa,EAASC,OAAOd,SAC1BC,UAAWY,EAASC,OAAOb,eAG5B,SAAUc,GAEXtB,EAAY,WAIdS,QAAQC,IAAI,mDAMf,IAGD,8BAEJ,cAACa,EAAA,EAAD,UAEA,eAACC,EAAA,EAAD,CAAMC,UAAU,cAAhB,UACE,cAACD,EAAA,EAAKE,OAAN,UAAa,6BAAI,sDACjB,eAACF,EAAA,EAAKG,KAAN,WACE,eAACH,EAAA,EAAKI,MAAN,gBAAc,4CAAd,OAA+C,uBAC/C,eAACJ,EAAA,EAAKK,KAAN,WACA,uBAAOC,IAAKjC,IADZ,MAC2B,cAACkC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,WAElExB,QAAQC,IAAI,SAAUb,EAASQ,QAAQC,OAEvCJ,GAAWD,IAJoB,0BAU7B,cAACuB,EAAA,EAAKU,OAAN,CAAaT,UAAU,aAAvB,SAEmB,OAAZ9B,EACC,qCACGA,EAAQS,KADX,WAEE,oCAAKT,QAAL,IAAKA,GAAL,UAAKA,EAASwC,YAAd,aAAK,EAAeC,OACpB,oCAAKzC,QAAL,IAAKA,OAAL,EAAKA,EAASA,QAAQ,GAAG0C,cACzB,qDAAiB1C,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAS2C,KAAKC,YAGjC,wDC7FKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6385ab48.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect, useRef } from \"react\"\nimport axios from 'axios';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button,Card,Container } from 'react-bootstrap';\n\n\nfunction App() {\n  const [weather, setweather] = useState(null)\n\n  // const [cityName, setCityName] = useState(\"karachi\")\n  const cityName = useRef(null);\n\n  const [location, setLocation] = useState(null)\n\n  const [submit, setSubmit] = useState(false)\n\n  useEffect(() => {\n\n    let name = \"\";\n\n    if (cityName.current.value) {\n      name = `q=${cityName.current.value}`\n    } else if (location) {\n      \n      if (!location) {\n\n      } else if (location === \"fail\") {\n        name = \"q=new york\";\n      } else if (location && location.latitude) {\n        name = `lat=${location.latitude}&lon=${location.longitude}`\n      }\n    }\n\n    console.log(\"name: \", name)\n    if (name) {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?${name}&appid=363a0329911c1b074081245aae1023c3&units=metric`)\n        .then(res => {\n          const newWeather = res.data;\n          // console.log(\"newWeather: \", newWeather);\n\n          setweather(newWeather);\n        });\n    }\n\n  }, [submit, location]);\n\n\n  useEffect(() => {\n\n    function getLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          console.log(\"position got: \", position.coords.latitude);\n          // console.log(\"position got: \", position.coords.longitude);\n          setLocation({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          })\n\n        }, function (error) {\n\n          setLocation(\"fail\")\n\n        });\n      } else {\n        console.log(\"Geolocation is not supported by this browser.\");\n      }\n    }\n\n    getLocation()\n\n  }, []);\n\n  return (\n    <div>\n\n<Container >\n  {/* <br></br><br></br><br></br><br></br> */}\n<Card className=\"text-center\" >\n  <Card.Header><h4><b>React Weather App</b></h4></Card.Header>\n  <Card.Body>\n    <Card.Title>  <h1>City Name:</h1> </Card.Title><br></br>\n    <Card.Text>\n    <input ref={cityName} />   <Button variant=\"primary\" onClick={() => {\n\nconsole.log(\"name: \", cityName.current.value)\n\nsetSubmit(!submit)\n\n}} >Submit</Button>\n    </Card.Text>\n    {/* <Button variant=\"primary\">Go somewhere</Button> */}\n  </Card.Body>\n  <Card.Footer className=\"text-muted\"> \n {\n        (weather !== null) ?\n          <>\n            {weather.name} Weather\n            <h1>{weather?.main?.temp}</h1>\n            <h2>{weather?.weather[0].description}</h2>\n            <h2>Wind Speed: {weather?.wind.speed}</h2>\n          </>\n          :\n          <h1>\n            Loading.....</h1>\n      }\n       </Card.Footer>\n</Card>\n</Container>\n{/* \n      <h1>City Name:</h1> */}\n      {/* <input onChange={(e) => {\n        console.log(\"e: \", e.target.value)\n        setCityName(e.target.value)\n      }} /> */}\n      {/* <input ref={cityName} />\n\n      <button onClick={() => {\n\n        console.log(\"name: \", cityName.current.value)\n\n        setSubmit(!submit)\n\n      }} >Submit</button>\n\n      <br /> */}\n\n      {/* <h1>{weather?.main?.temp}</h1> */}\n\n      {/* {\n        (weather !== null) ?\n          <>\n            {weather.name} Weather\n            <h1>{weather?.main?.temp}</h1>\n            <h2>{weather?.weather[0].description}</h2>\n            <h2>Wind Speed: {weather?.wind.speed}</h2>\n          </>\n          :\n          <h1>\n            Loading.....</h1>\n      } */}\n\n    </div>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}